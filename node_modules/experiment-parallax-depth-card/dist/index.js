var React = require('react');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var styles = {"card-container":"_A9yOf","card-wrap":"_2NQ6L","card-info":"_jk5LF","card-bg":"_wcf8-","card":"_xsi02"};

var ParallaxDepthCard = function ParallaxDepthCard(_ref) {
  var backgroundUrl = _ref.backgroundUrl,
      title = _ref.title,
      _onClick = _ref.onClick,
      children = _ref.children;
  var cardWrapRef = React.useRef(null);

  var _React$useState = React.useState({
    width: 0,
    height: 0,
    mouseX: 0,
    mouseY: 0,
    mounted: false
  }),
      state = _React$useState[0],
      setState = _React$useState[1];

  var mouseLeaveDelay = null;

  var handleMouseMove = function handleMouseMove(event) {
    if (cardWrapRef.current) {
      var width = state.width,
          height = state.height;

      var newState = _extends({}, state, {
        mouseX: event.pageX - cardWrapRef.current.offsetLeft - width / 2,
        mouseY: event.pageY - cardWrapRef.current.offsetTop - height / 2
      });

      setState(newState);
    }
  };

  var handleMouseEnter = React.useCallback(function () {
    if (mouseLeaveDelay) {
      clearTimeout(mouseLeaveDelay);
    }
  }, [mouseLeaveDelay]);
  var handleMouseLeave = React.useCallback(function () {
    mouseLeaveDelay = setTimeout(function () {
      setState(_extends({}, state, {
        mouseX: 0,
        mouseY: 0
      }));
    }, 1000);
  }, [mouseLeaveDelay, state]);
  React.useEffect(function () {
    var mounted = state.mounted;

    if (!mounted && (cardWrapRef === null || cardWrapRef === void 0 ? void 0 : cardWrapRef.current) && state.width === 0 && state.height === 0) {
      setState(_extends({}, state, {
        width: cardWrapRef.current.offsetWidth,
        height: cardWrapRef.current.offsetHeight,
        mounted: true
      }));
    }
  });

  var mousePX = function mousePX() {
    return state.mouseX / state.width;
  };

  var mousePY = function mousePY() {
    return state.mouseY / state.height;
  };

  var cardStyle = function cardStyle() {
    var rX = mousePX() * 30;
    var rY = mousePY() * -30;
    return {
      transform: "rotateY(" + rX + "deg) rotateX(" + rY + "deg)"
    };
  };

  var cardBgTransform = function cardBgTransform() {
    var tX = mousePX() * -40;
    var tY = mousePY() * -40;
    return {
      transform: "translateX(" + tX + "px) translateY(" + tY + "px)"
    };
  };

  return React.createElement("div", {
    className: styles['card-container'],
    onClick: function onClick() {
      return _onClick && _onClick();
    }
  }, React.createElement("div", {
    className: styles['card-wrap'],
    onMouseMove: function onMouseMove(event) {
      return handleMouseMove(event);
    },
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    ref: cardWrapRef
  }, React.createElement("div", {
    className: styles.card,
    style: cardStyle()
  }, React.createElement("div", {
    className: styles['card-bg'],
    style: _extends({}, cardBgTransform(), {
      backgroundImage: "url(" + backgroundUrl + ")"
    })
  }), React.createElement("div", {
    className: styles['card-info']
  }, React.createElement("h1", null, title), children))));
};

exports.ParallaxDepthCard = ParallaxDepthCard;
//# sourceMappingURL=index.js.map
