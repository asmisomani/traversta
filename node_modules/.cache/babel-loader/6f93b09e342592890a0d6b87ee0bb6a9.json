{"ast":null,"code":"import { useRef, useState, useCallback, useEffect, createElement } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar styles = {\n  \"card-container\": \"_A9yOf\",\n  \"card-wrap\": \"_2NQ6L\",\n  \"card-info\": \"_jk5LF\",\n  \"card-bg\": \"_wcf8-\",\n  \"card\": \"_xsi02\"\n};\n\nvar ParallaxDepthCard = function ParallaxDepthCard(_ref) {\n  var backgroundUrl = _ref.backgroundUrl,\n      title = _ref.title,\n      _onClick = _ref.onClick,\n      children = _ref.children;\n  var cardWrapRef = useRef(null);\n\n  var _React$useState = useState({\n    width: 0,\n    height: 0,\n    mouseX: 0,\n    mouseY: 0,\n    mounted: false\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var mouseLeaveDelay = null;\n\n  var handleMouseMove = function handleMouseMove(event) {\n    if (cardWrapRef.current) {\n      var width = state.width,\n          height = state.height;\n\n      var newState = _extends({}, state, {\n        mouseX: event.pageX - cardWrapRef.current.offsetLeft - width / 2,\n        mouseY: event.pageY - cardWrapRef.current.offsetTop - height / 2\n      });\n\n      setState(newState);\n    }\n  };\n\n  var handleMouseEnter = useCallback(function () {\n    if (mouseLeaveDelay) {\n      clearTimeout(mouseLeaveDelay);\n    }\n  }, [mouseLeaveDelay]);\n  var handleMouseLeave = useCallback(function () {\n    mouseLeaveDelay = setTimeout(function () {\n      setState(_extends({}, state, {\n        mouseX: 0,\n        mouseY: 0\n      }));\n    }, 1000);\n  }, [mouseLeaveDelay, state]);\n  useEffect(function () {\n    var mounted = state.mounted;\n\n    if (!mounted && (cardWrapRef === null || cardWrapRef === void 0 ? void 0 : cardWrapRef.current) && state.width === 0 && state.height === 0) {\n      setState(_extends({}, state, {\n        width: cardWrapRef.current.offsetWidth,\n        height: cardWrapRef.current.offsetHeight,\n        mounted: true\n      }));\n    }\n  });\n\n  var mousePX = function mousePX() {\n    return state.mouseX / state.width;\n  };\n\n  var mousePY = function mousePY() {\n    return state.mouseY / state.height;\n  };\n\n  var cardStyle = function cardStyle() {\n    var rX = mousePX() * 30;\n    var rY = mousePY() * -30;\n    return {\n      transform: \"rotateY(\" + rX + \"deg) rotateX(\" + rY + \"deg)\"\n    };\n  };\n\n  var cardBgTransform = function cardBgTransform() {\n    var tX = mousePX() * -40;\n    var tY = mousePY() * -40;\n    return {\n      transform: \"translateX(\" + tX + \"px) translateY(\" + tY + \"px)\"\n    };\n  };\n\n  return createElement(\"div\", {\n    className: styles['card-container'],\n    onClick: function onClick() {\n      return _onClick && _onClick();\n    }\n  }, createElement(\"div\", {\n    className: styles['card-wrap'],\n    onMouseMove: function onMouseMove(event) {\n      return handleMouseMove(event);\n    },\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    ref: cardWrapRef\n  }, createElement(\"div\", {\n    className: styles.card,\n    style: cardStyle()\n  }, createElement(\"div\", {\n    className: styles['card-bg'],\n    style: _extends({}, cardBgTransform(), {\n      backgroundImage: \"url(\" + backgroundUrl + \")\"\n    })\n  }), createElement(\"div\", {\n    className: styles['card-info']\n  }, createElement(\"h1\", null, title), children))));\n};\n\nexport { ParallaxDepthCard };","map":{"version":3,"sources":["../src/index.tsx"],"names":["ParallaxDepthCard","backgroundUrl","title","onClick","children","cardWrapRef","React","state","setState","width","height","mouseX","mouseY","mounted","mouseLeaveDelay","handleMouseMove","newState","event","handleMouseEnter","clearTimeout","handleMouseLeave","setTimeout","mousePX","mousePY","cardStyle","rX","rY","transform","cardBgTransform","tX","tY","className","styles","onMouseMove","onMouseEnter","onMouseLeave","ref","card","style","backgroundImage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBaA,iBAAiB,GAAyC,SAA1DA,iBAA0D,CAAA,IAAA,EAAA;MACrEC,aAAAA,GAAAA,IAAAA,CAAAA,a;MACAC,KAAAA,GAAAA,IAAAA,CAAAA,K;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,O;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;AAEA,MAAMC,WAAW,GAAGC,MAAAA,CAApB,IAAoBA,CAApB;;wBAE0B,QAAA,CAA2C;AACnEG,IAAAA,KAAK,EAD8D,CAAA;AAEnEC,IAAAA,MAAM,EAF6D,CAAA;AAGnEC,IAAAA,MAAM,EAH6D,CAAA;AAInEC,IAAAA,MAAM,EAJ6D,CAAA;AAKnEC,IAAAA,OAAO,EAAE;AAL0D,GAA3C,C;MAAnBN,KAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;MAAOC,QAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;;AAQd,MAAIM,eAAe,GAAnB,IAAA;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAA;AACtB,QAAIV,WAAW,CAAf,OAAA,EAAyB;AAAA,UACfI,KADe,GACGF,KADH,CAAA,KAAA;AAAA,UACRG,MADQ,GACGH,KADH,CAAA,MAAA;;AAEvB,UAAMS,QAAQ,GAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEZL,QAAAA,MAAM,EAAEM,KAAK,CAALA,KAAAA,GAAcZ,WAAW,CAAXA,OAAAA,CAAdY,UAAAA,GAA+CR,KAAK,GAFhD,CAAA;AAGZG,QAAAA,MAAM,EAAEK,KAAK,CAALA,KAAAA,GAAcZ,WAAW,CAAXA,OAAAA,CAAdY,SAAAA,GAA8CP,MAAM,GAAG;AAHnD,OAAA,CAAd;;AAMAF,MAAAA,QAAQ,CAARA,QAAQ,CAARA;AACD;AAVH,GAAA;;AAaA,MAAMU,gBAAgB,GAAG,WAAA,CAAkB,YAAA;AACzC,QAAA,eAAA,EAAqB;AACnBC,MAAAA,YAAY,CAAZA,eAAY,CAAZA;AACD;AAHsB,GAAA,EAItB,CAJH,eAIG,CAJsB,CAAzB;AAMA,MAAMC,gBAAgB,GAAG,WAAA,CAAkB,YAAA;AACzCN,IAAAA,eAAe,GAAGO,UAAU,CAAC,YAAA;AAC3Bb,MAAAA,QAAQ,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAaG,QAAAA,MAAM,EAAnB,CAAA;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAA,CAAA,CAARJ;AAD0B,KAAA,EAA5BM,IAA4B,CAA5BA;AADuB,GAAA,EAItB,CAAA,eAAA,EAJH,KAIG,CAJsB,CAAzB;AAMAR,EAAAA,SAAAA,CAAgB,YAAA;QACNO,OAAAA,GAAYN,KAAAA,CAAZM,O;;AAGR,QACE,CAAA,OAAA,KACAR,WADA,KAAA,IACAA,IAAAA,WADA,KAAA,KAAA,CACAA,GADA,KAAA,CACAA,GAAAA,WAAW,CADX,OAAA,KAEAE,KAAK,CAALA,KAAAA,KAFA,CAAA,IAGAA,KAAK,CAALA,MAAAA,KAJF,CAAA,EAKE;AACAC,MAAAA,QAAQ,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAENC,QAAAA,KAAK,EAAEJ,WAAW,CAAXA,OAAAA,CAFD,WAAA;AAGNK,QAAAA,MAAM,EAAEL,WAAW,CAAXA,OAAAA,CAHF,YAAA;AAINQ,QAAAA,OAAO,EAAE;AAJH,OAAA,CAAA,CAARL;AAMD;AAhBHF,GAAAA,CAAAA;;AAoBA,MAAMgB,OAAO,GAAG,SAAVA,OAAU,GAAA;AAAA,WAAMf,KAAK,CAALA,MAAAA,GAAeA,KAAK,CAA1B,KAAA;AAAhB,GAAA;;AACA,MAAMgB,OAAO,GAAG,SAAVA,OAAU,GAAA;AAAA,WAAMhB,KAAK,CAALA,MAAAA,GAAeA,KAAK,CAA1B,MAAA;AAAhB,GAAA;;AAEA,MAAMiB,SAAS,GAAG,SAAZA,SAAY,GAAA;AAChB,QAAMC,EAAE,GAAGH,OAAO,KAAlB,EAAA;AACA,QAAMI,EAAE,GAAGH,OAAO,KAAK,CAAvB,EAAA;AACA,WAAO;AACLI,MAAAA,SAAS,EAAA,aAAA,EAAA,GAAA,eAAA,GAAA,EAAA,GAAA;AADJ,KAAP;AAHF,GAAA;;AAOA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAA;AACtB,QAAMC,EAAE,GAAGP,OAAO,KAAK,CAAvB,EAAA;AACA,QAAMQ,EAAE,GAAGP,OAAO,KAAK,CAAvB,EAAA;AACA,WAAO;AACLI,MAAAA,SAAS,EAAA,gBAAA,EAAA,GAAA,iBAAA,GAAA,EAAA,GAAA;AADJ,KAAP;AAHF,GAAA;;AAQA,SACE,aAAA,CAAA,KAAA,EAAA;AACEI,IAAAA,SAAS,EAAEC,MAAM,CAAA,gBAAA,CADnB;AAEE7B,IAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,aAAMA,QAAO,IAAIA,QAAjB,EAAA;AAAA;AAFX,GAAA,EAIE,aAAA,CAAA,KAAA,EAAA;AACE4B,IAAAA,SAAS,EAAEC,MAAM,CAAA,WAAA,CADnB;AAEEC,IAAAA,WAAW,EAAE,SAAA,WAAA,CAAA,KAAA,EAAA;AAAA,aAAWlB,eAAe,CAA1B,KAA0B,CAA1B;AAAA,KAFf;AAGEmB,IAAAA,YAAY,EAAEhB,gBAHhB;AAIEiB,IAAAA,YAAY,EAAEf,gBAJhB;AAKEgB,IAAAA,GAAG,EAAE/B;AALP,GAAA,EAOE,aAAA,CAAA,KAAA,EAAA;AAAK0B,IAAAA,SAAS,EAAEC,MAAM,CAACK,IAAvB;AAA6BC,IAAAA,KAAK,EAAEd,SAAS;AAA7C,GAAA,EACE,aAAA,CAAA,KAAA,EAAA;AACEO,IAAAA,SAAS,EAAEC,MAAM,CAAA,SAAA,CADnB;AAEEM,IAAAA,KAAK,EAAA,QAAA,CAAA,EAAA,EACAV,eADA,EAAA,EAAA;AAEHW,MAAAA,eAAe,EAAA,SAAA,aAAA,GAAA;AAFZ,KAAA;AAFP,GAAA,CADF,EAQE,aAAA,CAAA,KAAA,EAAA;AAAKR,IAAAA,SAAS,EAAEC,MAAM,CAAA,WAAA;AAAtB,GAAA,EACE1B,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EADF,KACEA,CADF,EApBR,QAoBQ,CARF,CAPF,CAJF,CADF;AAjFK,C","sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\n\ntype ParallaxDepthCardPropsType = {\n  backgroundUrl: string\n  title: string\n  children?: React.ReactChild\n  onClick?: Function\n}\n\ntype ParallaxDepthCardStateType = {\n  width: number\n  height: number\n  mouseX: number\n  mouseY: number\n  mounted: boolean\n}\n\nexport const ParallaxDepthCard: React.FC<ParallaxDepthCardPropsType> = ({\n  backgroundUrl,\n  title,\n  onClick,\n  children\n}: ParallaxDepthCardPropsType) => {\n  const cardWrapRef = React.useRef<HTMLDivElement>(null)\n\n  const [state, setState] = React.useState<ParallaxDepthCardStateType>({\n    width: 0,\n    height: 0,\n    mouseX: 0,\n    mouseY: 0,\n    mounted: false\n  })\n\n  let mouseLeaveDelay: NodeJS.Timeout | null = null\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    if (cardWrapRef.current) {\n      const { width, height } = state\n      const newState = {\n        ...state,\n        mouseX: event.pageX - cardWrapRef.current.offsetLeft - width / 2,\n        mouseY: event.pageY - cardWrapRef.current.offsetTop - height / 2\n      }\n\n      setState(newState)\n    }\n  }\n\n  const handleMouseEnter = React.useCallback(() => {\n    if (mouseLeaveDelay) {\n      clearTimeout(mouseLeaveDelay)\n    }\n  }, [mouseLeaveDelay])\n\n  const handleMouseLeave = React.useCallback(() => {\n    mouseLeaveDelay = setTimeout(() => {\n      setState({ ...state, mouseX: 0, mouseY: 0 })\n    }, 1000)\n  }, [mouseLeaveDelay, state])\n\n  React.useEffect(() => {\n    const { mounted } = state\n\n    // mimic react.didMount()\n    if (\n      !mounted &&\n      cardWrapRef?.current &&\n      state.width === 0 &&\n      state.height === 0\n    ) {\n      setState({\n        ...state,\n        width: cardWrapRef.current.offsetWidth,\n        height: cardWrapRef.current.offsetHeight,\n        mounted: true\n      })\n    }\n  })\n\n  // computed props\n  const mousePX = () => state.mouseX / state.width\n  const mousePY = () => state.mouseY / state.height\n\n  const cardStyle = () => {\n    const rX = mousePX() * 30\n    const rY = mousePY() * -30\n    return {\n      transform: `rotateY(${rX}deg) rotateX(${rY}deg)`\n    }\n  }\n  const cardBgTransform = () => {\n    const tX = mousePX() * -40\n    const tY = mousePY() * -40\n    return {\n      transform: `translateX(${tX}px) translateY(${tY}px)`\n    }\n  }\n\n  return (\n    <div\n      className={styles['card-container']}\n      onClick={() => onClick && onClick()}\n    >\n      <div\n        className={styles['card-wrap']}\n        onMouseMove={(event) => handleMouseMove(event)}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        ref={cardWrapRef}\n      >\n        <div className={styles.card} style={cardStyle()}>\n          <div\n            className={styles['card-bg']}\n            style={{\n              ...cardBgTransform(),\n              backgroundImage: `url(${backgroundUrl})`\n            }}\n          />\n          <div className={styles['card-info']}>\n            <h1>{title}</h1>\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}